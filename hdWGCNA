#LOADING LIBRARIES AND PROCESSING SEURAT OBJECT

# single-cell analysis package
library(Seurat)

# plotting and data science packages
library(tidyverse)
library(cowplot)
library(patchwork)

# co-expression network analysis packages:
library(WGCNA)
library(hdWGCNA)

# using the cowplot theme for ggplot
theme_set(theme_cowplot())

# set random seed for reproducibility
set.seed(12345)

# optionally enable multithreading
enableWGCNAThreads(nThreads = 8)

# load the scRNA-seq dataset
 seurat_obj <- readRDS('*/out/integrated_seurat_NT_97_0.2.Rds') #Replace * with actual file path


p <- DimPlot(seurat_obj, group.by ='seurat_clusters', split.by='sample', label=TRUE) +
   umap_theme() + ggtitle('NT_97_99') + NoLegend()

p

# Specify the file path where you want to save the plot
file_path <- "*/out/UMAP.pdf"  # Remove the non-breaking space character #Replace * with actual path

# Save the plot to the specified file path
ggsave(filename = file_path, plot = p)

# violin plots for different QC stats
features <- c('nCount_RNA', 'nFeature_RNA')

# make a violin plot for each QC metric
plot_list <- lapply(features, function(x){ VlnPlot(
  seurat_obj,
  features = x,
  group.by = 'sample',
  pt.size=0) +
  RotatedAxis() +
  NoLegend() +
  geom_boxplot(notch=TRUE, fill=NA, outlier.shape=NA) +
  xlab('') +
  theme(plot.title = element_text(size=10, hjust=0.5))
})

# assemble plots with patchwork
wrap_plots(plot_list, ncol=4)

                                           

# Loop through the list of plots and save them individually
for (i in 1:length(plot_list)) {
  file_path <- paste0("*/out/plots/violin_plot_", i, ".png") #Replace * with actual path
  ggsave(filename = file_path, plot = plot_list[[i]], width = 6, height = 4)
}


# keep cells with greater than 500 UMIs and fewer than 5000 UMIs
seurat_obj <- subset(seurat_obj, nCount_RNA >= 4000) #Replace 4000 with value as per QC Plot 

# change the assay to the gene counts matrix
DefaultAssay(seurat_obj) <- 'RNA'

# run normalization, feature selection, scaling, and linear dimensional reduction
seurat_obj <- seurat_obj %>%
  NormalizeData() %>%
  FindVariableFeatures() %>%
  ScaleData() %>%
  RunPCA(reduction.name = 'pca')
  
# run UMAP
seurat_obj <- RunUMAP(
  seurat_obj,
  dims=1:20,
  min.dist=0.3,
  reduction='pca',
  reduction.name = 'umap'
)

# plot clusters and samples on the UMAP
p1 <- DimPlot(seurat_obj, group.by = 'seurat_clusters', label=TRUE, reduction='umap')  + 
  NoLegend()
p2 <- DimPlot(seurat_obj, group.by = 'sample', label=TRUE, reduction='umap') +
  NoLegend()
p3 <- FeaturePlot(seurat_obj, features='nCount_RNA', reduction='umap', order=TRUE) 

# show the plots
p1 | p2 | p3


annotations <- read.table(paste0("*/NT_97_annotations_0.2.txt"),  header=TRUE, sep='\t') #Replace * with actual path
ix <- match(seurat_obj$seurat_clusters, annotations$seurat_cluster)
seurat_obj$annotation <- annotations$annotation[ix]
seurat_obj$seurat_clusters <- annotations$seurat_clusters[ix]


p1 <- DimPlot(seurat_obj,split.by = 'sample', group.by = 'seurat_clusters', label=TRUE, reduction='umap') +
  NoLegend()
p2 <- DimPlot(seurat_obj, split.by = 'sample', group.by = 'annotation', label=TRUE, repel=TRUE, reduction='umap') +
  NoLegend()
p1 | p2

saveRDS(seurat_obj, file = '*/out/NT_97_99_0.2_processed_seurat.rds') #Replace * with actual path
-------------------------------------------------------------------------------------------
#START HERE FOR FRESH SAMPLE using processed file as input
# single-cell analysis package
library(Seurat)

# plotting and data science packages
library(tidyverse)
library(cowplot)
library(patchwork)
library(igraph)
# co-expression network analysis packages:
library(WGCNA)
library(hdWGCNA)

# using the cowplot theme for ggplot
theme_set(theme_cowplot())

# set random seed for reproducibility
set.seed(12345)

# optionally enable multithreading
enableWGCNAThreads(nThreads = 8)


# re-load processed Seurat object:
seurat_obj <- readRDS('*/out/NT_97_99_0.2_processed_seurat.rds') #Replace * with actual path

DefaultAssay(seurat_obj) <- 'RNA'

# change the idents to your desired clusters, cell annotations, etc
Idents(seurat_obj) <- seurat_obj$annotation


# Run FindAllMarkers to get cluster marker genes!!
cluster_markers <- FindAllMarkers(
  seurat_obj,
  logfc.threshold = 0.05,
  min.pct = 0.1
)

cluster_markers <- write.csv(cluster_markers, file='*/out/cluster_markers.csv') #Replace * with actual path
cluster_markers <- read.csv(file='*/out/cluster_markers.csv') #Replace * with actual path
cluster_markers <- subset(cluster_markers, !(cluster %in% c('Cluster1', 'Cluster2', 'Cluster3', 'Cluster4', 'Cluster5'))) #Replace # with actual Cluster

#SETUP AND RUN WGCNA

# setup this hdWGCNA experiment for scRNAseq derived clusters
seurat_obj <- SetupForWGCNA(
  seurat_obj,
  gene_select = "variable", #Replace it with gene list if using Pseudobulk analyses as the starting point
  wgcna_name = "variable",
)

# setup this hdWGCNA experiment for pseudobulk analyses
  seurat_obj <- SetupForWGCNA(
  seurat_obj, 
  wgcna_name = "MitoCarta",
  features = c("Gene1","Gene2","Gene3") #Replace Gene1, Gene2 .. with your genes of interest
metacell_location = NULL
)

---------------------------------------------------------------------------------------------
#If you have the WGCNA file ready then start here

# single-cell analysis package
library(Seurat)

# plotting and data science packages
library(tidyverse)
library(cowplot)
library(patchwork)

# co-expression network analysis packages:
library(WGCNA)
library(hdWGCNA)

# using the cowplot theme for ggplot
theme_set(theme_cowplot())

# set random seed for reproducibility
set.seed(12345)

# optionally enable multithreading
enableWGCNAThreads(nThreads = 8)


#seurat_obj <- readRDS("*/T10exp-H_0.2_SFT14_hdWGCNA_object.rds") #Replace * with actual path

# construct metacells  in each group
  seurat_obj <- MetacellsByGroups(
  seurat_obj = seurat_obj,
  group.by = 'sample', # specify the columns in seurat_obj@meta.data to group by
  reduction = 'umap', # select the dimensionality reduction to perform KNN on
  k = 20, # nearest-neighbors parameter
  max_shared = 10, # maximum number of shared cells between two metacells
  ident.group = 'sample' # set the Idents of the metacell seurat object
)

seurat_obj <- SetDatExpr(
  seurat_obj,
  group_name = "*" # Replace *  with the name of the sample of interest in the group.by column
  group.by = 'sample',
  assay = 'RNA',
  slot = 'data'
)

seurat_obj <- SetDatExpr(
  seurat_obj,
  group_name = "*", # the name of the sample of interest in the group.by column
  group.by="seurat_clusters", # the metadata column containing the cell type info. This same column should have also been used in MetacellsByGroups
  assay = 'RNA', # using RNA assay
  slot = 'data' # using normalized data
)

# normalize metacell expression matrix:
seurat_obj <- NormalizeMetacells(seurat_obj)

# Test different soft powers:
seurat_obj <- TestSoftPowers(
  seurat_obj,
  networkType = 'signed' # you can also use "unsigned" or "signed hybrid"
)

# plot the results:
plot_list <- PlotSoftPowers(seurat_obj)

# assemble with patchwork
wrap_plots(plot_list, ncol=2)

# Create a directory to save the combined plot
dir.create("*/out/TF10/plots_combined") 

# Assemble all plots in one panel using patchwork
combined_plot <- wrap_plots(plot_list, ncol = 2)

# Save the combined plot
combined_file_path <- "*/out/TF10/plots_combined/combined_plots.png" #Replace * with actual file path
ggsave(filename = combined_file_path, plot = combined_plot, width = 10, height = 8)

power_table <- GetPowerTable(seurat_obj)
head(power_table)
write.csv(power_table, file = "*/out/TF10/power_table.csv", row.names = FALSE) #Replace * with file actual path

# construct co-expression network:
  seurat_obj <- ConstructNetwork(
  seurat_obj, soft_power=9,#Add soft_power based on soft thresholding power plot
  setDatExpr=FALSE,
  tom_name = 'TF10-H_0.2_SFT9', overwrite = TRUE # name of the topoligical overlap matrix written to disk #Replace TF10-H_0.2_SFT9 with your group name 
)

# Plot dendrogram
PlotDendrogram(seurat_obj, main = 'TF10-H_0.2_SFT9_hdWGCNA_Dendrogram') Replace TF10-H_0.2_SFT9_hdWGCNA_Dendrogram with your real name

# Create a directory to save the dendrogram plot
dir.create("*/out/TF10/, recursive = TRUE") #Replace * with actual path #Replace TF10 with your group name 

# Save the dendrogram plot
dendrogram_file_path <- "*/out/TF10/TF10-H_0.2_SFT9_dendrogram.pdf" #Replace * with actual path
dev.copy2pdf(file = dendrogram_file_path, height = 6, width = 8)
dev.off()

TOM <- GetTOM(seurat_obj)

file.copy(from = "*/TF10-H_0.2_SFT9_TOM.rda", 
          to = "*/out/TF10/TF10-H_0.2_SFT9_TOM.rda") #Replace * with actual path

# need to run ScaleData first or else harmony throws an error:
seurat_obj <- ScaleData(seurat_obj, features=VariableFeatures(seurat_obj))

# compute all MEs in the full single-cell dataset
seurat_obj <- ModuleEigengenes(
 seurat_obj,
 group.by.vars="sample"
)

#The ME matrices are stored as a matrix where each row is a cell and each column is a module. This matrix can be extracted from the Seurat object using the GetMEs function, which retrieves the hMEs by default.

# harmonized module eigengenes:
hMEs <- GetMEs(seurat_obj)

# module eigengenes:
MEs <- GetMEs(seurat_obj, harmonized=FALSE)


# compute eigengene-based connectivity (kME):
seurat_obj <- ModuleConnectivity(
  seurat_obj,
  group.by = c('sample'), group_name = '*' # Replace *  with the name of the sample of interest in the group.by column
)

#For convenience, we re-name the hdWGCNA modules to indicate that they are from the inhibitory neuron group. More information about renaming modules can be found in the module customization tutorial.

# rename the modules
seurat_obj <- ResetModuleNames(
  seurat_obj,
  new_name = "TF10-H_0.2_SFT9-M"
)

#We can visualize the genes in each module ranked by kME using the PlotKMEs function.

# plot genes ranked by kME for each module

p <- PlotKMEs(
  seurat_obj,
  n_hubs = 10,
  text_size = 3.5,
  ncol = 5,
  plot_widths = c(3, 2),
  wgcna_name = NULL
)

p

# Save the KME plot                                                        
kme_file_path <- "/home/genomics/Drp1/out/TF10/KME_plot.jpg"
ggsave(filename = kme_file_path, plot = p, width = 10, height = 8)

# Save the KME plot                                                        
kme_file_path <- "/home/genomics/Drp1/out/TF10/KME_plot.png"
ggsave(filename = kme_file_path, plot = p, width = 10, height = 8)


TOM <- GetTOM(seurat_obj)

# get the module assignment table:
modules <- GetModules(seurat_obj)

# show the first 6 columns:
head(modules[,1:6])

#Output

#A table of the top N hub genes sorted by kME can be extracted using the GetHubGenes function.

# get hub genes
hub_df <- GetHubGenes(seurat_obj, n_hubs = 10)

head(hub_df)
hub_file_path <- "*/out/TF10/hub_genes.csv" # Replace *  with the actual path
write.csv(hub_df, file = hub_file_path, row.names = FALSE)

#Output

#This wraps up the critical analysis steps for hdWGCNA, so remember to save your output.

saveRDS(seurat_obj, file='*/out/TF10-H_0.2_SFT9_hdWGCNA_object.rds')  # Replace *  with the actual path Replace "TF10-H_0.2_SFT9_hdWGCNA_object" with Sample Name


#HUB GENE NETWORK VISUALIZATION
# single-cell analysis package
library(Seurat)

# plotting and data science packages
library(tidyverse)
library(cowplot)
library(patchwork)

# co-expression network analysis packages:
library(WGCNA)
library(hdWGCNA)

# network analysis & visualization package:
library(igraph)

# using the cowplot theme for ggplot
theme_set(theme_cowplot())

# set random seed for reproducibility
set.seed(12345)
#Module Network Visualization
ModuleNetworkPlot(seurat_obj)


# hubgene network
hub_gene <- HubGeneNetworkPlot(
  seurat_obj,
  n_hubs = 3, n_other=5,
  edge_prop = 0.75,
  vertex.label.cex = 1,
  hub.vertex.size = 6,
  mods = 'all',
)

g <- HubGeneNetworkPlot(seurat_obj,  return_graph=TRUE)

seurat_obj <- RunModuleUMAP(
  seurat_obj,
  n_hubs = 10, # number of hub genes to include for the UMAP embedding
  n_neighbors=15, # neighbors parameter for UMAP
  min_dist=0.1 # min distance between points in UMAP space
)

# Create the UMAP plot
umap_plot <- DimPlot(seurat_obj, reduction = "umap")

# Save the UMAP plot as an image
umap_file_path <- "*/out/umap_plot.png" #Replace * with actual path
ggsave(filename = umap_file_path, plot = umap_plot, width = 8, height = 6)


# Create the UMAP plot with hub gene expression using Seurat's default palette
umap_hub_gene_plot <- DimPlot(
  seurat_obj,
  reduction = "umap",
  label = TRUE, # Show labels (e.g., hub gene expression)
  pt.size = 1.5, # Adjust point size
  cols = seurat_obj@meta.data$hub_gene_marker # Use Seurat's default palette
)

# Save the UMAP plot with hub gene expression as an image
umap_hub_gene_file_path <- "*/out/umap_hub_gene_plot.png"   #Replace * with actual path
ggsave(filename = umap_hub_gene_file_path, plot = umap_hub_gene_plot, width = 8, height = 6)

#Next we will make a simple visualization of the UMAP using ggplot2:

# get the hub gene UMAP table from the Seurat object
umap_df <- GetModuleUMAP(seurat_obj)

#HubGenePlotMinusSelfConnections
library(Seurat)
library(SingleCellSignalR)

# Assuming 'seurat_obj' is your Seurat object

# Create the hub gene network plot
hub_gene <- HubGeneNetworkPlot(
  seurat_obj,
  n_hubs = 20, n_other = 0,
  edge_prop = 0.75,
  vertex.label.cex = 1,
  hub.vertex.size = 4,
  mods = 'all'
)

# Extract the graph
g <- HubGeneNetworkPlot(seurat_obj, return_graph = TRUE)

# Identify the edges belonging to module T1exp_0.2_FMMCGnew_T10SFT10-M1
module_edges <- which(V(g)$module == "T1exp_0.2_FMMCGnew_T10SFT10-M1")

# Remove self-connections within the specified module
self_edges <- which(E(g)$from == E(g)$to & E(g)$from %in% module_edges)
g <- delete_edges(g, self_edges)

# Subset the graph to include only nodes and edges from the specified module
g_module <- induced_subgraph(g, module_edges)

# Plot the modified graph for the specified module
plot(g_module, vertex.label.cex = 1, vertex.size = 4)
